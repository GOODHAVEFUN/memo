day02
- 1시간 30분 => 18시 20분에 수업 마침(다음주 월, 화, 수)
복습 -> 변수 -> 제어문자, 출력메소드, 서식문자

0. 복습
자바 구성요소
	자바프로젝트 -> 패키지 -> 클래스 -> 메소드 -> 소스코드

자바 프로젝트(폴더)
	하나의 프로그램의 단위
	프로그램을 구성하는 것들을 모아둔 폴더

패키지(폴더)
	소스파일들의 묶음 단위
	프로젝트 하위 폴더

소스파일
	.java로 끝나는 파일이며 소스코드가 작성되어있다
	이클립스에서 클래스를 생성하면 자동으로 클래스와 같은 이름으로 소스파일 만들어준다

클래스
	자바의 모든 코드는 클래스 내부에 작성된다
	클래스의 이름은 반드시 대문자로 시작해야된다

중괄호{}
	영역을 표시한다

키워드(예약어)
	이미 정해진 역할이 있는 단어

메소드
	이름 뒤에 소괄호()가 있는 대부분의 명령어는 메소드이다
	키워드 뒤에 ()가 있는 명령어는 메소드가 아니다
	메소드는 어떠한 기능이다
	메소드는 항상 클래스 영역 내부에 만들어져있다

메인메소드
	자바프로그램이 실행되면 메인메소드의 코드가 실행된다
	프로그램이 시작되는 시작점(Entry point)

출력메소드
	println()
	print()
	printf()
	괄호안에 있는 내용(값)을 콘솔창에 출력한다

	System.out.println("출력할 내용");

콘솔창
	입력과 출력이 가능한 창
	컴퓨터와 개발자가 의사소통 할 수 있는 창

닷 연산자, 하위 연산자
	.
	~안에 라고 해석한다

세미콜론;
	문장의 끝을 표시한다

들여쓰기
	가독성을 높이기 위해 사용한다
	자동 들여쓰기 ctrl + shift + f

주석
	// : 한줄 주석 	ctrl + /(설정, 해제)
	/**/ : 여러줄 주석 ctrl + shift + /(설정)
			ctrl + shift + \ (해제)
	설명하기 위한 코드
	잠시 일부코드를 제외하고 싶을 때

자료형(Data Type)
	정수형	int	4
		long	8	8L
	실수형	double	8
		float	4
	논리형	boolean	1	true, false
	문자형	char	2	'a'
	문자열	String 	??	"string"

	long num1 = 4L;
	float num2 = 5.1f;

변수
	하나의 자료형과 하나의 값만 저장할 수 있는 저장공간

변수의 선언과 사용
	자료형 변수명;
	변수명 = 값;

	자료형 변수명 = 값;

	사용	변수명을 이용한다

1. 변수 
선언시 주의사항
	같은 영역에서 같은 이름의 변수를 선언할 수 없다
	되도록 소스코드 위쪽에 한꺼번에 선언한다
	되도록 선언과 동시에 초기화를 한다

변수명 주의사항
	문자부터 시작한다
	특수문자를 쓸 수 없다(단, _와 $는 가능)
	공백을 사용할 수 없다
	키워드(예약어)를 사용할 수 없다
	되도록 소문자로 시작한다(대소문자를 구분한다)
	되도록 의미없는 문자를 사용하지 않는다
	되도록 한글은 사용하지 않는다

	userage 
	userAge 	: 카멜 표기법
	user_age	: 스네이크 표기법, 팟홀표기법

변수를 사용하는 이유(값을 왜 변수에 저장해서 사용할까?)
	반복되는 값을 쉽게 관리하기 위해서(값을 재사용하기 위함)
	값에 의미를 붙여주기 위해서(값에 이름을 붙임)

RAM
	int num = 10;
	num이라는 이름의 저장공간이 RAM에 할당된다

	Stack
	Heap
		Data
	Method	BSS
		Text

주소값
	메모리(RAM)에 저장공간이 할당되면 고유한 값인 주소값이 부여된다

2. 제어문자(Escape Character/Sequence)
	따옴표 안에서 사용되면 미리 예약된 특수한 기능을 하는 문자
	\(백슬래쉬, 역슬래쉬)를 사용한다
	
	\n	줄바꿈(windows에서는 줄바꿈을 \r\n으로 표현)
	\t	일정간격을 띄어준다(tab)
	\'	문자열안에 작은따옴표를 표현
	\"	문자열안에 큰따옴표를 표현
	\\	문자열안에 역슬래쉬를 표현

3. 출력메소드
	괄호안에 있는 값을 콘솔창에 출력한다

	println()
		전달된값을 출력하고 줄바꿈이 된다
	print()
		전달된값을 출력하고 줄바꿈이 되지 않는다
	printf()
		형식(서식 format)에 맞는 값을 출력하고 줄바꿈이 되지 않는다

출력메소드의 목적(출력메소드를 사용하는 이유?)
	개발자가 오류를 해결하기 위해 값을 확인할 때 사용한다

형식지정자(서식문자)
	출력 형식을 지정한다
	%로 시작하며 printf()에서 사용한다
	따옴표안에서 작성해야한다(문자열)
	, 뒤에 나오는 값이 형식 지정자의 위치로 들어가게 된다

	자료형	형식지정자
	int	%d	decimal(10진수 정수)
		%o	octal(8진수 정수)
		%x	haxadecimal(16진수 정수)
	double	%f	float(실수)
	char	%c	character(문자)
	String 	%s	String(문자열)
	boolean %s	논리형을 위한 서식문자는 없다

서식문자의 옵션
	%[- or 0][n][.m]서식문자

	- 	왼쪽정렬
	0	비어있는 공간을 0으로 채움(정수, 실수)
	n	자리수
	.m	소수점 아래 자리수(double)/문자열자르기(String)

형변환(Type Casting)
	1. 자동형변환
		1) 작은 byte의 값을 큰 byte의 변수에 저장하면 자동으로 형변환 된다
			int 	<- char
			long 	<- int, char
			double 	<- int, long, float, char
			float 	<- int, long, char
			char 	<- int

		2) 정수 + 정수 = 정수
			1 + 1 = 2
		   실수 + 정수 = 실수
			1.0 + 1 = 2.0

		3) 문자는 정수로 자동 형변환된다
			'A' + 1 = 66

	2. 강제형변환
		(자료형)값
	
문자열의 형변환
	1. 다른자료형 -> 문자열
		기본 자료형과 빈 문자열을 연결 시켜서 형변환
		기본 자료형 + ""(빈문자열)
		3 + "" = "3"
		1.25 + "" = "1.25"































