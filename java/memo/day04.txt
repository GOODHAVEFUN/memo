day04
복습 -> 제어문(조건문 if문, switch문) -> 기타제어문 -> 반복문 -> 배열

0. 복습
1) 입력 메소드
	입력 클래스
	Scanner sc = new Scanner(System.in);
	=> import ctrl + shift + o

	sc.next()
	sc.nextLine()	
	sc.nextInt()
	sc.nextDouble()

2) 연산자
	최우선연산자	() .
	단항연산자		+, -, !
	산술연산자		+, -, *, /, %
	쉬프트연산자	<<, >>
	관계연산자		>, <, >=, <=, ==, !=
	논리연산자		and, or, not
	삼항연산자		조건식 ? 참일때의 값 : 거짓일때의 값
	대입연산자		=

	증감연산자
		++, --
		int num = 1
		num++, ++num
		num--, --num
		전위형 : 해당 라인부터 바로 적용
		후위형 : 다음 라인부터 적용(증감연산자가 끝난 시점부터 적용)

3) 제어문
	코드의 실행 흐름을 제어할 때 사용한다
	조건문(if, switch)
	반복문(for, while, do~while)
	기타제어문(break, continue)

1. 조건문
1) switch문
switch(변수명){
	case 값1:
		실행할문장;
		break;
	case 값2:
		실행할문장;
		break;
	...
	default:
		실행할문장;
		break;
}

	변수에 정수형(int, long), 문자형(char), 문자열(String-java 7부터 가능) 들어갈 수 있음

2)  삼항연산자, if문, switch문의 비교
	삼항연산자 : 조건식이 1개 있을 경우
	if문 : 조건식에 비교연산자가 있거나 여러개의 조건식을 논리연산자로 연결할 때 사용
	switch문 : 하나의 변수에 여러개의 값이 담길 수 있고, case의 값과 같은지 비교할 때 사용

2. 기타제어문
	반복문에서 사용된다. break문은 switch에서도 사용한다
	break문 : 즉시 해당 중괄호 영역을 탈출한다	
		아래 코드를 실행시키지 않는다
	continue문 : 즉시 다음 반복으로 넘어간다
		아래 코드를 실행시키지 않는다

3. 반복문(for, while, do~while)
1) for문
	for(초기식; 조건식; 증감식;){
		실행할 문장;
	}
	
	초기식 : 처음에 설정할 값
	조건식 : 조건이 true면 영역안의 문장을 실행시키고 false면 for문 탈출한다
	증감식 : 값을 얼마나 증감할지 정하는 식

2) while문
	while(조건식){
		실행할 문장;
	}
	
	조건식이 참인동안 반복한다
	실행중에 조건식이 거짓이 될 수 있어야만 무한루프에 빠지지 않는다

3) for문과 while문 차이
	for문 : 몇 번 반복할 지 알 때
	while문 : 몇 번 반복할 지 모를 때

4) do~while문
	while문과 동일하지만 최소 한 번은 무조건 실행해야할 때 사용한다

	do{
		실행할 문장;
	}while(조건식);

5) 이중for문
	for(초기식; 조건식; 증감식){
		for(초기식; 조건식; 증감식){
		}
	}

4. 배열(Array)
	문자열 => 문자들의 나열
	배열 => 저장공간의 나열

배열의 사용이유
	1. 변수를 여러개 선언하면 이름도 여러개 생긴다 -> 각 저장공간을 관리하기 불편하다
	n칸 배열을 선언하면 저장공간 여러개 생기고 이름은 1개만 생긴다 -> 관리하기 편하다
	2. 규칙성이 없는 값에 규칙성을 부여하기 위해서(index)

변수	: []	하나의 타입으로 된 하나의 값만 저장할 수 있는 저장공간
배열 	: [][][] 하나의 타입으로 된 여러개의 값을 저장할 수 있는 저장공간

배열의 선언
1) 배열 변수 선언 후 배열 생성
	자료형[] 배열명 = new 자료형[배열크기];
	//어떤 값을 넣을 지 모르나 몇칸 만들지는 알 때 사용

	int[] num = new int[3];
	
2) 배열 변수 선언과 함께 초기값 할당
	자료형[] 배열명 = {값1, 값2, 값3, ..};
	//어떤 값을 넣을 지 알 때 사용

3) 배열 변수 선언 후 배열 생성과 초기화
	자료형[] 배열명;
	배열명 = new 자료형[]{값1, 값2, 값3,..};

4) 배열을 생성하지 않고, 배열 변수를 초기화 하는 방법
	배열명을 선언하게 되면 배열의 크기나 값을 정하지 않은 상태로 현재는 사용하지 않으나
	이후에 값을 할당할때 배열을 생성하고 값을 할당하는 방법
	자료형[] 배열명 = null;	
	//어떤 값을 넣을지도 모르고, 몇 칸을 만들지도 모를 때 사용

	int[] ar = null;













