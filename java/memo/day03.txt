day03
복습 -> 형변환 -> 입력메소드 -> 연산자 -> 제어문

0. 복습
자바 구성요소
	자바 프로젝트 -> 패키지 -> 클래스(.java) -> 메소드 -> 소스코드

자료형
	정수형	int
		long
	실수형	double
		float
	논리형	boolean
	문자형	char
	문자열	String

변수 선언
	자료형 변수명;
	변수명 = 값;

변수 선언과 동시에 초기화
	자료형 변수명 = 값;

변수의 사용
	변수명을 이용한다

변수선언시 주의사항
	같은 영역에서 같은 이름의 변수 선언할 수 없다
	되도록 소스코드 위쪽에 한꺼번에 선언한다
	되도록 선언과 동시에 초기화를 한다

변수명 작성시 주의사항
	문자부터 시작한다
	특수문자를 쓸 수 없다(단, _와 $는 가능)
	공백을 쓸 수 없다
	키워드(예약어)를 사용할 수 없다
	
	username;
	userName; // 카멜표기법
	user_name; // 스네이크 표기법, 팟홀표기법

제어문자
	따옴표 안에서(문자열) 미리 예약된 특수한 기능을 하는 문자
	\를 사용한다

	\n	줄바꿈
	\t	일정간격 띄워줌(tab)
	\'	문자열 안에서 작은따옴표를 표현
	\" 	문자열 안에서 큰따옴표를 표현
	\\	문자열 안에서 역슬래쉬를 표현

출력메소드
	.println()	전달된 값을 출력하고 줄바꿈이 된다
	.print()	전달된 값을 출력하고 줄바꿈이 되지 않는다
	.printf()	형식에 맞는 값을 출력하고 줄바꿈이 되지 않는다
	
서식문자의 옵션
	자료형	형식지정자
	int	%d
		%o
		%x
	double	%f
	char	%c
	String 	%s
	boolean	%s

	%[- or 0][n][.m]서식문자

형변환
1. 자동형변환
	1) 작은 byte의 값을 큰 byte의 변수에 저장할 때
	2) 정수 + 정수 = 정수
	   정수 + 실수 = 실수
	3) 문자는 정수로 자동 형변환된다

2. 강제형변환
	(자료형)값

3. 문자열의 형변환
	다른 자료형 -> 문자열
		+ ""(빈문자열)

--------------------------------------------------------------------------------------------
1. 형변환
문자열의 형변환
1) 다른 자료형 -> 문자열
	문자열과 다른 자료형을 연결하면 결과는 항상 문자열이 된다

2) 문자열 -> 다른 자료형
	String => 클래스
	
	정수형 	Integer.parseInt("문자열")
	실수형	Double.parseDouble("문자열")
	논리형	Boolean.parseBoolean("문자열")
	문자형	"문자열".charAt()

2. 입력 메소드
	
입력클래스
	import java.util.Scanner;
	Scanner sc = new Scanner(System.in);

	변수만들때
	자료형 변수명 = 값;

입력메소드
	입력클래스 Scannner 클래스 내부에 있는 입력 메소드를 사용한다
	next() : 사용자가 입력한 문자열 값을 String 타입으로 반환한다
		사용자가 입력한 값 중 공백 또는 줄바꿈 문자를 구분점으로 각 문자를 분리한다
		첫번째 문자열은 첫번째 next()에 담고, 두번째 문자열은 두번째 next()에 담는다

	nextLine() : 사용자가 입력한 문자열 값
		공백 또는 줄바꿈 문자도 값으로 입력되기 때문에 한 줄 전체를 입력받는다(엔터를 소모한다)

	nextInt() : 입력받은 값을 int타입으로 돌려준다
		입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다
	
	nextDouble() : 입력받은 값을 double타입으로 돌려준다


p48
2-9, 2-10
2-16, 2-17

	int myAge = 20;
	int yourAge = myAge;
	
	syso(myAge)
	syso(yourAge) 
	20 출력결과

p63
	String a = new String("apple");
	String a = "apple";

2-21 ~ 2-29
	표2-07
2-30, 2-31


3. 연산자
연산자
	기능이 있는 특수문자

연산자의 우선순위
	하나의 수식에 여러개의 연산자를 사용하면 어떤 연산이 먼저 되는지를 구분한다

	최우선	() .
	단항	
	산술
	쉬프트	>> <<
	관계	
	논리	not or and
	삼항
	대입

결합성
	하나의 수식에 동일한 연산자가 여러개 사용되면 알맞은 방향으로 연산되는 성질
	연산자의 진행방향은 왼쪽 -> 오른쪽
	단항, 대입 연산자만 오른쪽 -> 왼쪽

산술연산자(숫자자료형-int, long, double, float / 문자열 - String)
	+ 
		숫자 : 연산
		문자열 : 연결
	-
	*
	/
		int / int = int(몫)
		int / 0 => 오류 발생(0으로 나눌수 없다)
	%	나머지연산자

복합대입연산자
	누적연산자
	+= 	num1 += num2 => num1 = num1 + num2 // 대입연산자를 기준으로 왼쪽은 저장공간, 오른쪽은 값
	-=
	*=
	/=
	%=

관계연산자
	>, <
	>=, <=
	==
	!=

삼항 연산자
	조건식 ? 참일때의 값 : 거짓일때의 값
	
	int result = 10 > 9 ? 10 : 9;
	//참과 거짓 자리에는 값만 저장할 수 있다

논리연산자
	AND 	&&  	A && B => A와 B가 모두 참이라면 참
	OR	||	A || B => A와 B 중 하나라도 참이라면 참
	* 만약에 && || 같이 사용할 경우 &&의 우선순위가 높다!

단항연산자
	NOT	!	!A	=> 조건식이 참이면 거짓으로, 거짓이면 참으로 변경

자료형의 기본값
	int	0
	long	0L
	double	0.0 or 0.0d
	float	0.0f
	boolean false
	char 	'\u0000'
	참조형변수 null

4. 제어문
제어문
	프로그램의 흐름을 제어한다
	
조건문	
	if문(if, if~else, if~else if~else) / switch문(switch ~ case)

	if문
	if(조건식){
		 실행할 문장;
	}
	else if(조건식){
		실행할 문장;
	}
	else{
		실행할 문장;
	}

- if문 : 조건식이 true면 영역안의 코드가 실행됨
- else if문 : 위의 조건식이 거짓이고 else if문의 조건식이 참이면 실행됨
- else문 : 위의 조건식이 모두 거짓이면 실행
	* else if, else는 if 없이는 사용이 불가능하다



반복문

기타제어문


























